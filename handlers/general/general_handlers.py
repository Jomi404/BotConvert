import aiogram.exceptions
from aiogram.filters import CommandStart, StateFilter
import aiogram.exceptions
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import F
from aiogram import types
from pyrogram import enums
from aiogram.fsm.context import FSMContext
import re
from aiogram.utils.markdown import hlink

from utils import db
from keyboards import getAdminKeyboard
from keyboards import getKeyboardConfirm
from states import EditMessage

from filters import IsSubscrib
from filters import IsAdmin
from keyboards import getKeyboardCheck
from utils import bot
from utils import dp
from utils import getHyperLink

temp = []


@dp.message(IsSubscrib(), CommandStart())
async def subCmdStart(message: Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text='–≠—Ç–æ –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –¥—Ä—É–≥–æ–π.'
                                '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç!')


@dp.message(~IsSubscrib(), CommandStart())
async def subCmdStart(message: Message):
    hyperlink = await getHyperLink()
    keyboard = await getKeyboardCheck()
    msg = await bot.send_message(chat_id=message.from_user.id, text=f'–°–ø–µ—Ä–≤–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {hyperlink}',
                                 parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True)

    temp.append(msg.message_id)
    temp.append(message.message_id)


@dp.message(~IsSubscrib())
async def NotSubscriber(message: Message):
    hyperlink = await getHyperLink()
    keyboard = await getKeyboardCheck()

    msg = await bot.send_message(chat_id=message.from_user.id, text=f'–°–ø–µ—Ä–≤–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {hyperlink}',
                                 parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True)
    temp.append(msg.message_id)
    temp.append(message.message_id)


@dp.callback_query(~IsSubscrib(), F.data.startswith("check"))
async def checkSubscribe(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    keyboard = await getKeyboardCheck()
    hyperlink = await getHyperLink()
    msg = await bot.send_message(chat_id=callback.from_user.id, text=f'–°–ø–µ—Ä–≤–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {hyperlink}',
                                 parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True)
    temp.append(msg.message_id)


@dp.callback_query(IsSubscrib(), F.data.startswith("check"))
async def checkSubscribe(callback: types.CallbackQuery):
    for n_message in temp:
        await bot.delete_message(chat_id=callback.from_user.id, message_id=n_message)
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–≠—Ç–æ –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –¥—Ä—É–≥–æ–π.'
                                '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç!', reply_markup=None)


# –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–∞–∑–º–µ—Ä
@dp.message(IsSubscrib(), F.document)
async def sendDocument(message: Message):
    global file_obj
    file_type = ''
    err = False
    document = message.document
    filename = document.file_name
    file_id = document.file_id
    try:
        file_obj = await bot.get_file(file_id)
        file_type = file_obj.file_path.split('.')[-1]
    except aiogram.exceptions.TelegramBadRequest:
        err = True
    finally:
        if err:
            await message.reply(text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª–µ–µ 20 –ú–ë –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram '
                                     'API.')
        else:
            # —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            await bot.download(file=file_id, destination=f'./data/save_files/{file_id}.{file_type}')
            await message.reply(text=f'–¢–∏–ø —Ñ–∞–π–ª–∞ - {file_type} (üíº –î–æ–∫—É–º–µ–Ω—Ç)\n–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {filename}')


@dp.message(IsSubscrib(), F.photo)
async def sendPhoto(message: Message):
    image_url = ''
    photo_type = ''
    photo = message.photo[-1]
    err = False
    try:
        photo_obj = await bot.get_file(photo.file_id)
        photo_type = photo_obj.file_path.split('.')[-1]
        image_url = f"./data/save_files/{message.photo[-1].file_id}.{photo_type}"
    except aiogram.exceptions.TelegramBadRequest:
        err = True
    finally:
        if err:
            await message.reply(text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª–µ–µ 20 –ú–ë –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram '
                                     'API.')
        else:
            # —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            await bot.download(photo, destination=image_url)
            await message.reply(text=f'–¢–∏–ø —Ñ–∞–π–ª–∞ - {photo_type} (üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)')



chatNames = []


@dp.message(IsAdmin(), Command('admin'))
async def admCmd(message: Message):
    keyboard = await getAdminKeyboard()
    await bot.send_message(chat_id=message.from_user.id,
                           text='–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n'
                                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)


@dp.message(~IsAdmin(), Command('admin'))
async def noAdmCmd(message: Message):
    await bot.send_message(chat_id=message.from_user.id, text='–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞. –î–∞–Ω–Ω—ã–π '
                                                              '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')


@dp.callback_query(F.data.startswith("change_url"))
async def changeUrl(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await bot.send_message(chat_id=callback.from_user.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª')
    await state.set_state(EditMessage.waitingUrl)



@dp.message(StateFilter(EditMessage.waitingUrl), F.text)
async def getUrlEdit(message: Message, state: FSMContext):
    links = re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+',
                       message.text)
    if links:
        name_chat = message.text.split('/')[-1]
        dataChannel = await bot.get_chat(chat_id=f'@{name_chat}')
        print(dataChannel.model_dump_json())
        chatNames.append(dataChannel.username)
        link = dataChannel.invite_link
        titleChannel = dataChannel.title
        hyperlink = hlink(titleChannel, link)
        keyboard = await getKeyboardConfirm()
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'–¢–µ–ø–µ—Ä—å –≤–∞—à —Ç–µ–∫—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n–°–ø–µ—Ä–≤–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {hyperlink}',
                               parse_mode="HTML", disable_web_page_preview=True, reply_markup=keyboard)
        await state.set_state(EditMessage.isLink)
    else:
        await message.reply("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Å—ã–ª–æ–∫.")


@dp.callback_query(StateFilter(EditMessage.isLink), F.data.startswith("save_change"))
async def saveChange(callback: types.CallbackQuery, state: FSMContext):
    dataChannel = await bot.get_chat(chat_id=f'@{chatNames[-1]}')
    db.query('UPDATE channels set username = ?, title = ? WHERE id = 1', (chatNames[-1], dataChannel.title))
    await callback.answer(text='–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞‚úÖ', cache_time=1)
    await callback.message.delete()
    await state.set_state(None)


@dp.callback_query(StateFilter(EditMessage.isLink), F.data.startswith("del_change"))
async def saveChange(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer(text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞‚ùå', cache_time=1)
    await bot.send_message(chat_id=callback.from_user.id, text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '
                                                               '/admin, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.')
    await callback.message.delete()
    await state.set_state(None)


@dp.callback_query(F.data.startswith("get_subscribers"))
async def getSubscibers(callback: types.CallbackQuery):
    dataChannel = db.getDataChannels()


@dp.message(IsSubscrib(), F.text)
async def existType(message: Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text='–≠—Ç–æ –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ãüíº –∏–ª–∏ —Ñ–æ—Ç–æüì∑ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ '
                                '–¥—Ä—É–≥–æ–π.')
